SET-1

1.Sarah bought a new car in 2001 for $24,000. The dollar value of her car changed each
year as shown in the table below.

import matplotlib.pyplot as plt
years = [2001, 2002, 2003, 2004, 2005, 2006, 2007]
car_values = [24000, 22500, 19700, 17500, 14500, 10000, 5800]
plt.figure(figsize=(10, 6))
plt.subplot(111)
plt.plot(years, car_values, linestyle='-.', color='red', marker='*', markersize=20,
markerfacecolor='green')
plt.title("Value Deprecation", loc="left")
plt.xlabel("Year")
plt.ylabel("Car Value")
plt.show()
plt.savefig('prgrm1.png')

2) We are provided with the height of 30 cherry trees.The height of the trees (in
inches): 61,63, 64, 66, 68, 69, 71, 71.5, 72, 72.5, 73, 73.5, 74, 74.5, 76, 76.2, 76.5, 77,
77.5, 78, 78.5,79, 79.2, 80, 81, 82, 83, 84, 85,87.Create a histogram with a bin size of
5.

import matplotlib.pyplot as plt
import numpy as np
x = np.random.normal([61, 63, 64, 66, 68, 69, 71, 71.5,
 72, 72.5, 73, 73.5, 74, 74.5, 76,
 76.2, 76.5, 77, 77.5, 78, 78.5,
 79, 79.2, 80, 81, 82, 87])
plt.hist(x, bins=range(40, 115, 5), )
plt.title('Cherry tree heights', loc='left')
plt.xlabel('Height (in inches)')
plt.ylabel('Frequency')
plt.show()



SET-2

1) Following table gives the daily sales of the following items in a shop
Use subplot function to draw the line graphs with grids(color as blue and line style
dotted) for the above information as 2 separate graphs in two rows

import matplotlib.pyplot as plt
days = ['Mon', 'Tues', 'Wed', 'Thurs', 'Fri']
drinks_sales = [300, 450, 150, 400, 650]
food_sales = [400, 500, 350, 300, 500]
fig, axs = plt.subplots(2, 1, figsize=(8, 8))
axs[0].plot(days, drinks_sales, linestyle='--', color='cyan', marker='H',markersize=8,
markerfacecolor='magenta', markeredgecolor='black')
axs[0].set_xlabel('Days of Week')
axs[0].set_ylabel('Sale of Drinks')
axs[0].set_title('Sales Data1', loc='right')
axs[0].set_title("SJC23MCA-2059 : TOBIN K TOMY\nBatch : MCA 2023-25",loc='left')
axs[0].grid(True, color='blue', linestyle='dotted')
axs[1].plot(days, food_sales, linestyle='-', color='yellow', marker='D', markersize=8,
markerfacecolor='green', markeredgecolor='red')
axs[1].set_xlabel('Days of Week')
axs[1].set_ylabel('Sale of Food')
axs[1].set_title('sales Data2', loc='center')
axs[1].grid(True, color='blue', linestyle='dotted')
plt.tight_layout()
plt.show()

2.Using the iris data set, implement the KNN algorithm. Take different values for
the Test and training data set .Also use different values for k. Also find the accuracy
level.

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
dataset = pd.read_csv("iris.csv")
x = dataset.iloc[:,:-1].values
y = dataset.iloc[:,4].values
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.20)
from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=3)
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)
from sklearn.metrics import classification_report, confusion_matrix
print(classification_report(y_test, y_pred))
from sklearn.metrics import accuracy_score
print("Accuracy:",accuracy_score(y_test,y_pred)



SET-3

1.Create scatter plot for the below data:(use Scatter function).
Create scatter plot for each Segment with following properties within one graph.

import matplotlib.pyplot as plt
import numpy as np
month = np.array(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov',
'Dec'])
AS = np.array([173, 153, 195, 147, 120, 144, 148, 109, 174, 130, 172, 131])
LS = np.array([189, 189, 105, 112, 173, 109, 151, 197, 174, 145, 177, 161])
SLS = np.array([185, 185, 126, 134, 196, 153, 112, 133, 200, 145, 167, 110])
plt.xlabel('Months of Year', fontsize=18)
plt.ylabel('Sales of Segments')
plt.title('Sales Data')
plt.title('SJC23MCA-2059 : TOBIN K TOMY\nBatch : MCA 2023-25\n', loc='right')
plt.scatter(month, AS, label='Affordable Segment', color='pink')
plt.scatter(month, LS, label='Luxury Segment', color='yellow')
plt.scatter(month, SLS, label='Super Luxury Segment', color='blue')
plt.show()

2.Download iris data set suitable for the KNN and implement the KNN algorithm. Take different values for the Test and training data set .Also use different values for k.

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
dataset = pd.read_csv("Blood Transfusion.csv")
x = dataset.iloc[:,:-1].values
y = dataset.iloc[:,4].values
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test=train_test_split(x, y, test_size=0.20)
from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=5)
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)
from sklearn.metrics import classification_report, confusion_matrix
print(classification_report(y_test,y_pred))



SET-4
1. Display the below data using multiline plot( 3 different lines in same graph)
● Display the description of the graph in upper right corner(use legend())
● Use different colors and line styles for 3 different lines.

import matplotlib.pyplot as plt
import numpy as np
month = np.array(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov',
'Dec'])
AS = np.array([173, 153, 195, 147, 120, 144, 148, 109, 174, 130, 172, 131])
LS = np.array([189, 189, 105, 112, 173, 109, 151, 197, 174, 145, 177, 161])
SLS = np.array([185, 185, 126, 134, 196, 153, 112, 133, 200, 145, 167, 110])
# Plot setup
plt.figure(figsize=(10, 6))
plt.xlabel('Months of Year', fontsize=14)
plt.ylabel('Sales of Segments', fontsize=14)
plt.title('Sales Data', fontsize=16)
# Scatter plots with lines
plt.plot(month, AS, label='Affordable Segment', color='pink', linestyle='-',
marker='o')
plt.plot(month, LS, label='Luxury Segment', color='yellow', linestyle='--', marker='s')
plt.plot(month, SLS, label='Super Luxury Segment', color='blue', linestyle='-.',
marker='^')
# Add legend in upper-right corner
plt.legend(loc='upper right', fontsize=12)
# Display the plot
plt.grid(True, linestyle=':', alpha=0.7)
plt.show()

2.Using iris data set, implement naive bayes classification for different naive Bayes
classification algorithms.( using bernoulli ).
a. Find out the accuracy level w.r.t to each algorithm
b. Display the no:of mislabeled classification from test data set
c. List out the class labels of the mismatching records

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
dataset = pd.read_csv("iris.csv")
x = dataset.iloc[:,:-1].values
y = dataset['variety'].values
dataset.head(5)
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)
from sklearn.naive_bayes import BernoulliNB
classifier = BernoulliNB()
classifier.fit(x_train,y_train)
y_pred = classifier.predict(x_test)
print(y_pred)
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print(cm)
from sklearn.metrics import accuracy_score
print("Accuracy : ", accuracy_score(y_test, y_pred))
df = pd.DataFrame({'Real values':y_test, 'Predicted values':y_pred})
print(df)



SET-5:

1.100 students were asked what their primary mode of transport for getting to
school was.Create a bar graph with
● X axis -mode of Transport and Y axis ‘frequency’
● Provide appropriate labels and title
● Width .1, color green

import matplotlib.pyplot as plt
import numpy as np
mode_transport = np.array(['Walking', 'Cycling', 'Car', 'Bus', 'Train'])
feq = np.array([29, 15, 35, 18, 3])
plt.xlabel('Mode of Transport')
plt.ylabel('Frequency')
plt.bar(mode_transport, feq, width=0.1, color='green')
plt.show()

2.) Use car details CSV file and implement decision tree algorithm
● Find out the accuracy level.
● Display the no: of mislabelled classification from test data set
● List out the class labels of the mismatching records

import pandas as pd
print("SJC23MCA-2059 : TOBIN K TOMY")
print("Batch : MCA 2023-25")
data = pd.read_csv('car.csv')
print(data.head())
col_names = ['buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'class']
data.columns = col_names
print(col_names)
data['class'], class_names = pd.factorize(data['class'])
data['buying'], _ = pd.factorize(data['buying'])
data['maint'], _ = pd.factorize(data['maint'])
data['doors'], _ = pd.factorize(data['doors'])
data['persons'], _ = pd.factorize(data['persons'])
data['lug_boot'], _ = pd.factorize(data['lug_boot'])
data['safety'], _ = pd.factorize(data['safety'])
print(data.head())
x = data.iloc[:, :-1]
y = data.iloc[:, -1]
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.3)
from sklearn.tree import DecisionTreeClassifier
tree1 = DecisionTreeClassifier()
tree1.fit(x_train,y_train)
y_pred = tree1.predict(x_test)
count_missclassified = (y_test != y_pred).sum()
print('Misclassified samples count : ',count_missclassified)
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test,y_pred)
print("Accuracy",accuracy)



SET-6

1.Sarah bought a new car in 2001 for $24,000. The dollar value of her car changed each
year as shown in the table below.

import matplotlib.pyplot as plt
years = [2001, 2002, 2003, 2004, 2005, 2006, 2007]
car_values = [24000, 22500, 19700, 17500, 14500, 10000, 5800]
plt.figure(figsize=(10, 6))
plt.subplot(111)
plt.plot(years, car_values, linestyle='-.', color='red', marker='*', markersize=20,
markerfacecolor='green')
plt.title("Value Deprecation", loc="left")
plt.xlabel("Year")
plt.ylabel("Car Value")
plt.show()
plt.savefig('prgrm1.png')

2.Using the iris data set, implement the KNN algorithm. Take different values for
the Test and training data set .Also use different values for k. Also find the accuracy
level.

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
dataset = pd.read_csv("iris.csv")
x = dataset.iloc[:,:-1].values
y = dataset.iloc[:,4].values
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.20)
from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=3)
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)
from sklearn.metrics import classification_report, confusion_matrix
print(classification_report(y_test, y_pred))
from sklearn.metrics import accuracy_score
print("Accuracy:",accuracy_score(y_test,y_pred)





